<snippet>
    <content><![CDATA[
#include <bits/stdc++.h>
using namespace std;
// Competetive Template:
typedef long long ll;
typedef unsigned long long int ull;
typedef long double ld;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<long long int> vll;
typedef vector<char> vc;
typedef pair <ll,ll> pll;
typedef pair <ll,string> pls;
typedef pair <string, ll> psl;
typedef set <ll> sl;
typedef set <pll> sll;
typedef set <char> sc;
typedef map <ll, ll> mll;
typedef map <pll, ll> mpll;
typedef map <string, ll> msl;
typedef priority_queue <ll> max_heap ;
typedef priority_queue < ll, vector<ll> , greater<ll> > min_heap;
typedef set<int>::iterator sit;
typedef map<int,int>::iterator mit;
typedef vector<int>::iterator vit;
typedef vector<long long int>::iterator vllit;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;
const int MAXN = 1e6 + 3;
#define _  %  MOD
#define __ %= MOD
#define      each(it,s)        for(vit it = s.begin(); it != s.end(); ++it)
#define      sortA(v)          sort(v.begin(), v.end())
#define      sortD(v)          sort(v.begin(), v.end(), greater<auto>())
#define      fill(a)           memset(a, 0, sizeof (a))
#define      rep(i, n)         for(int i = 0; i < (n); ++i)
#define      repA(i, a, n)     for(int i = a; i <= (n); ++i)
#define      repD(i, a, n)     for(int i = a; i >= (n); --i)
#define      pq(x)             priority_queue<x,std::vector<x>,compare>
#define      rpq(x)            priority_queue<x,std::vector<x>,compare>
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define fbo find_by_order
#define ook order_of_key
#define loop(i,start,end) for(auto i=(start<end)?start:start-1;(start<end)?i<end:i>=end;(start<end)?i++:i--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    // freopen("error.txt", "w", stderr);
#endif
    int t;
    cin>>t;
    while(t--){
        ${1:// hackermannn... $0}
    }
return 0;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>cpp-extended</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
<!--     <scope>source.cpp</scope> -->
</snippet>